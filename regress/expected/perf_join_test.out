SELECT * FROM bitemporal_internal.ll_create_bitemporal_table(
    'public',
    'emp30k',
    $$id integer,
      salary numeric,
      deptid integer
    $$,
'id');
 ll_create_bitemporal_table 
----------------------------
 t
(1 row)

DROP TABLE public.dept;
ERROR:  table "dept" does not exist
SELECT * FROM bitemporal_internal.ll_create_bitemporal_table(
    'public',
    'dept',
    $$id integer,
      name TEXT
    $$,
'id');
 ll_create_bitemporal_table 
----------------------------
 t
(1 row)

INSERT INTO public.dept(id, name, effective, asserted)
  SELECT generate_series(0, 100) AS id, 
  md5(random()::text) AS name, 
  tstzrange('1900-01-01'::timestamptz, 'infinity', '[)') AS effective,
  tstzrange(now(), 'infinity', '[)') AS asserted;
INSERT INTO public.emp30k(id, salary, deptid, effective, asserted)
  SELECT id, salary, (id/3)::integer AS deptid, effective, tstzrange(now(), 'infinity', '[)') AS asserted FROM
  (
    SELECT generate_series(1, 300, 1) AS id, generate_series(501, 800, 1) AS salary
        ) AS attrs
  CROSS JOIN (
    SELECT tstzrange(t.d, (t.d + '1 day'::interval), '[)') AS effective FROM
      generate_series('1950-01-01'::timestamptz, '1950-04-10'::timestamptz, '1 day') AS t(d)
      ) eff;
SELECT COUNT(*) FROM public.emp30k;
 count 
-------
 30000
(1 row)

EXPLAIN ANALYZE SELECT * FROM public.emp30k JOIN public.dept ON public.emp30k.deptid = public.dept.id;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=23.05..2762.51 rows=60250 width=228) (actual time=0.059..24.428 rows=30000 loops=1)
   Hash Cond: (emp30k.deptid = dept.id)
   ->  Seq Scan on emp30k  (cost=0.00..578.76 rows=20776 width=116) (actual time=0.009..5.253 rows=30000 loops=1)
   ->  Hash  (cost=15.80..15.80 rows=580 width=112) (actual time=0.041..0.043 rows=101 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 21kB
         ->  Seq Scan on dept  (cost=0.00..15.80 rows=580 width=112) (actual time=0.010..0.022 rows=101 loops=1)
 Planning Time: 0.377 ms
 Execution Time: 26.384 ms
(8 rows)

EXPLAIN ANALYZE SELECT public.emp30k.id, public.dept.name, 
interval_join(
  public.emp30k.effective, public.dept.effective
  ) AS effective
FROM public.emp30k JOIN public.dept ON 
  public.emp30k.deptid = public.dept.id AND 
  interval_joinable(public.emp30k.effective, public.dept.effective)
  WHERE interval_contains_now(public.emp30k.asserted) AND 
  interval_contains_now(public.dept.asserted);
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=163.21..8412.33 rows=2228 width=68) (actual time=1.376..435.849 rows=30000 loops=1)
   Hash Cond: (emp30k.deptid = dept.id)
   Join Filter: interval_joinable(emp30k.effective, dept.effective)
   ->  Seq Scan on emp30k  (cost=0.00..5772.76 rows=6925 width=40) (actual time=0.275..35.171 rows=30000 loops=1)
         Filter: interval_contains_now(asserted)
   ->  Hash  (cost=160.80..160.80 rows=193 width=68) (actual time=0.224..0.225 rows=101 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 18kB
         ->  Seq Scan on dept  (cost=0.00..160.80 rows=193 width=68) (actual time=0.015..0.187 rows=101 loops=1)
               Filter: interval_contains_now(asserted)
 Planning Time: 0.153 ms
 Execution Time: 437.488 ms
(11 rows)

-- 60k
SELECT * FROM bitemporal_internal.ll_create_bitemporal_table(
    'public',
    'emp60k',
    $$id integer,
      salary numeric,
      deptid integer
    $$,
'id');
 ll_create_bitemporal_table 
----------------------------
 t
(1 row)

INSERT INTO public.emp60k(id, salary, deptid, effective, asserted)
  SELECT id, salary, (id/3)::integer AS deptid, effective, tstzrange(now(), 'infinity', '[)') AS asserted FROM
  (SELECT generate_series(1, 300, 1) AS id, generate_series(501, 800, 1) AS salary) AS attrs
  CROSS JOIN (
    SELECT tstzrange(t.d, (t.d + '1 day'::interval), '[)') AS effective FROM
      generate_series('1950-01-01'::timestamptz, '1950-07-19'::timestamptz, '1 day') AS t(d)
      ) eff;
SELECT COUNT(*) FROM public.emp60k;
 count 
-------
 60000
(1 row)

EXPLAIN ANALYZE SELECT * FROM public.emp60k JOIN public.dept ON public.emp60k.deptid = public.dept.id;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=23.05..5494.59 rows=120338 width=228) (actual time=0.033..21.905 rows=60000 loops=1)
   Hash Cond: (emp60k.deptid = dept.id)
   ->  Seq Scan on emp60k  (cost=0.00..1155.96 rows=41496 width=116) (actual time=0.005..5.177 rows=60000 loops=1)
   ->  Hash  (cost=15.80..15.80 rows=580 width=112) (actual time=0.022..0.025 rows=101 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 21kB
         ->  Seq Scan on dept  (cost=0.00..15.80 rows=580 width=112) (actual time=0.003..0.011 rows=101 loops=1)
 Planning Time: 0.085 ms
 Execution Time: 23.763 ms
(8 rows)

EXPLAIN ANALYZE SELECT public.emp60k.id, public.dept.name, interval_join(public.emp60k.effective, public.dept.effective) AS effective
FROM public.emp60k JOIN public.dept ON 
  public.emp60k.deptid = public.dept.id AND 
  interval_joinable(public.emp60k.effective, public.dept.effective)
  WHERE interval_contains_now(public.emp60k.asserted) AND interval_contains_now(public.dept.asserted);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=163.21..16638.99 rows=4449 width=68) (actual time=0.374..746.460 rows=60000 loops=1)
   Hash Cond: (emp60k.deptid = dept.id)
   Join Filter: interval_joinable(emp60k.effective, dept.effective)
   ->  Seq Scan on emp60k  (cost=0.00..11529.96 rows=13832 width=40) (actual time=0.034..56.754 rows=60000 loops=1)
         Filter: interval_contains_now(asserted)
   ->  Hash  (cost=160.80..160.80 rows=193 width=68) (actual time=0.093..0.095 rows=101 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 18kB
         ->  Seq Scan on dept  (cost=0.00..160.80 rows=193 width=68) (actual time=0.009..0.075 rows=101 loops=1)
               Filter: interval_contains_now(asserted)
 Planning Time: 0.143 ms
 Execution Time: 749.222 ms
(11 rows)

-- 90k
SELECT * FROM bitemporal_internal.ll_create_bitemporal_table(
    'public',
    'emp90k',
    $$id integer,
      salary numeric,
      deptid integer
    $$,
'id');
 ll_create_bitemporal_table 
----------------------------
 t
(1 row)

DROP TABLE public.dept;
SELECT * FROM bitemporal_internal.ll_create_bitemporal_table(
    'public',
    'dept',
    $$id integer,
      name TEXT
    $$,
'id');
 ll_create_bitemporal_table 
----------------------------
 t
(1 row)

INSERT INTO public.dept(id, name, effective, asserted)
  SELECT generate_series(0, 150) AS id, 
  md5(random()::text) AS name, 
  tstzrange('1900-01-01'::timestamptz, 'infinity', '[)') AS effective,
  tstzrange(now(), 'infinity', '[)') AS asserted;
INSERT INTO public.emp90k(id, salary, deptid, effective, asserted)
  SELECT id, salary, (id/3)::integer AS deptid, effective, tstzrange(now(), 'infinity', '[)') AS asserted FROM
  (SELECT generate_series(1, 450, 1) AS id, generate_series(501, 950, 1) AS salary) AS attrs
  CROSS JOIN (
    SELECT tstzrange(t.d, (t.d + '1 day'::interval), '[)') AS effective FROM
      generate_series('1950-01-01'::timestamptz, '1950-07-19'::timestamptz, '1 day') AS t(d)
      ) eff;
SELECT COUNT(*) FROM public.emp90k;
 count 
-------
 90000
(1 row)

EXPLAIN ANALYZE SELECT * FROM public.emp90k JOIN public.dept ON public.emp90k.deptid = public.dept.id;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=23.05..8234.06 rows=180589 width=228) (actual time=0.049..34.979 rows=90000 loops=1)
   Hash Cond: (emp90k.deptid = dept.id)
   ->  Seq Scan on emp90k  (cost=0.00..1734.72 rows=62272 width=116) (actual time=0.007..7.893 rows=90000 loops=1)
   ->  Hash  (cost=15.80..15.80 rows=580 width=112) (actual time=0.036..0.037 rows=151 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 27kB
         ->  Seq Scan on dept  (cost=0.00..15.80 rows=580 width=112) (actual time=0.005..0.019 rows=151 loops=1)
 Planning Time: 0.104 ms
 Execution Time: 37.986 ms
(8 rows)

EXPLAIN ANALYZE SELECT public.emp90k.id, public.dept.name, interval_join(public.emp90k.effective, public.dept.effective) AS effective
FROM public.emp90k JOIN public.dept ON 
  public.emp90k.deptid = public.dept.id AND 
  interval_joinable(public.emp90k.effective, public.dept.effective)
  WHERE interval_contains_now(public.emp90k.asserted) AND interval_contains_now(public.dept.asserted);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=163.21..24888.11 rows=6677 width=68) (actual time=0.323..1097.460 rows=90000 loops=1)
   Hash Cond: (emp90k.deptid = dept.id)
   Join Filter: interval_joinable(emp90k.effective, dept.effective)
   ->  Seq Scan on emp90k  (cost=0.00..17302.72 rows=20757 width=40) (actual time=0.019..81.400 rows=90000 loops=1)
         Filter: interval_contains_now(asserted)
   ->  Hash  (cost=160.80..160.80 rows=193 width=68) (actual time=0.124..0.126 rows=151 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 22kB
         ->  Seq Scan on dept  (cost=0.00..160.80 rows=193 width=68) (actual time=0.006..0.099 rows=151 loops=1)
               Filter: interval_contains_now(asserted)
 Planning Time: 0.090 ms
 Execution Time: 1101.142 ms
(11 rows)

-- 120k
SELECT * FROM bitemporal_internal.ll_create_bitemporal_table(
    'public',
    'emp120k',
    $$id integer,
      salary numeric,
      deptid integer
    $$,
'id');
 ll_create_bitemporal_table 
----------------------------
 t
(1 row)

DROP TABLE public.dept;
SELECT * FROM bitemporal_internal.ll_create_bitemporal_table(
    'public',
    'dept',
    $$id integer,
      name TEXT
    $$,
'id');
 ll_create_bitemporal_table 
----------------------------
 t
(1 row)

INSERT INTO public.dept(id, name, effective, asserted)
  SELECT generate_series(0, 200) AS id, 
  md5(random()::text) AS name, 
  tstzrange('1900-01-01'::timestamptz, 'infinity', '[)') AS effective,
  tstzrange(now(), 'infinity', '[)') AS asserted;
INSERT INTO public.emp120k(id, salary, deptid, effective, asserted)
  SELECT id, salary, (id/3)::integer AS deptid, effective, tstzrange(now(), 'infinity', '[)') AS asserted FROM
  (SELECT generate_series(1, 600, 1) AS id, generate_series(501, 1100, 1) AS salary) AS attrs
  CROSS JOIN (
    SELECT tstzrange(t.d, (t.d + '1 day'::interval), '[)') AS effective FROM
      generate_series('1950-01-01'::timestamptz, '1950-07-19'::timestamptz, '1 day') AS t(d)
      ) eff;
SELECT COUNT(*) FROM public.emp120k;
 count  
--------
 120000
(1 row)

EXPLAIN ANALYZE SELECT * FROM public.emp120k JOIN public.dept ON public.emp120k.deptid = public.dept.id;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=23.05..10966.14 rows=240677 width=228) (actual time=0.148..45.273 rows=120000 loops=1)
   Hash Cond: (emp120k.deptid = dept.id)
   ->  Seq Scan on emp120k  (cost=0.00..2311.92 rows=82992 width=116) (actual time=0.012..10.409 rows=120000 loops=1)
   ->  Hash  (cost=15.80..15.80 rows=580 width=112) (actual time=0.123..0.125 rows=201 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 34kB
         ->  Seq Scan on dept  (cost=0.00..15.80 rows=580 width=112) (actual time=0.012..0.059 rows=201 loops=1)
 Planning Time: 0.225 ms
 Execution Time: 49.136 ms
(8 rows)

EXPLAIN ANALYZE SELECT public.emp120k.id, public.dept.name, interval_join(public.emp120k.effective, public.dept.effective) AS effective
FROM public.emp120k JOIN public.dept ON 
  public.emp120k.deptid = public.dept.id AND 
  interval_joinable(public.emp120k.effective, public.dept.effective)
  WHERE interval_contains_now(public.emp120k.asserted) AND interval_contains_now(public.dept.asserted);
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=163.21..33115.02 rows=8899 width=68) (actual time=0.381..1508.333 rows=120000 loops=1)
   Hash Cond: (emp120k.deptid = dept.id)
   Join Filter: interval_joinable(emp120k.effective, dept.effective)
   ->  Seq Scan on emp120k  (cost=0.00..23059.92 rows=27664 width=40) (actual time=0.021..112.605 rows=120000 loops=1)
         Filter: interval_contains_now(asserted)
   ->  Hash  (cost=160.80..160.80 rows=193 width=68) (actual time=0.178..0.179 rows=201 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 27kB
         ->  Seq Scan on dept  (cost=0.00..160.80 rows=193 width=68) (actual time=0.020..0.143 rows=201 loops=1)
               Filter: interval_contains_now(asserted)
 Planning Time: 0.127 ms
 Execution Time: 1513.267 ms
(11 rows)

-- 150k
SELECT * FROM bitemporal_internal.ll_create_bitemporal_table(
    'public',
    'emp150k',
    $$id integer,
      salary numeric,
      deptid integer
    $$,
'id');
 ll_create_bitemporal_table 
----------------------------
 t
(1 row)

INSERT INTO public.emp150k(id, salary, deptid, effective, asserted)
  SELECT id, salary, (id/3)::integer AS deptid, effective, tstzrange(now(), 'infinity', '[)') AS asserted FROM
  (SELECT generate_series(1, 600, 1) AS id, generate_series(501, 1100, 1) AS salary) AS attrs
  CROSS JOIN (
    SELECT tstzrange(t.d, (t.d + '1 day'::interval), '[)') AS effective FROM
      generate_series('1950-01-01'::timestamptz, '1950-09-07'::timestamptz, '1 day') AS t(d)
      ) eff;
SELECT COUNT(*) FROM public.emp150k;
 count  
--------
 150000
(1 row)

EXPLAIN ANALYZE SELECT * FROM public.emp150k JOIN public.dept ON public.emp150k.deptid = public.dept.id;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=23.05..13698.22 rows=300765 width=228) (actual time=0.051..59.474 rows=150000 loops=1)
   Hash Cond: (emp150k.deptid = dept.id)
   ->  Seq Scan on emp150k  (cost=0.00..2889.12 rows=103712 width=116) (actual time=0.006..13.323 rows=150000 loops=1)
   ->  Hash  (cost=15.80..15.80 rows=580 width=112) (actual time=0.039..0.041 rows=201 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 34kB
         ->  Seq Scan on dept  (cost=0.00..15.80 rows=580 width=112) (actual time=0.003..0.019 rows=201 loops=1)
 Planning Time: 0.101 ms
 Execution Time: 64.527 ms
(8 rows)

EXPLAIN ANALYZE SELECT public.emp150k.id, public.dept.name, interval_join(public.emp150k.effective, public.dept.effective) AS effective
FROM public.emp150k JOIN public.dept ON 
  public.emp150k.deptid = public.dept.id AND 
  interval_joinable(public.emp150k.effective, public.dept.effective)
  WHERE interval_contains_now(public.emp150k.asserted) AND interval_contains_now(public.dept.asserted);
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=163.21..41341.68 rows=11120 width=68) (actual time=0.352..1829.435 rows=150000 loops=1)
   Hash Cond: (emp150k.deptid = dept.id)
   Join Filter: interval_joinable(emp150k.effective, dept.effective)
   ->  Seq Scan on emp150k  (cost=0.00..28817.12 rows=34571 width=40) (actual time=0.020..134.362 rows=150000 loops=1)
         Filter: interval_contains_now(asserted)
   ->  Hash  (cost=160.80..160.80 rows=193 width=68) (actual time=0.160..0.161 rows=201 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 27kB
         ->  Seq Scan on dept  (cost=0.00..160.80 rows=193 width=68) (actual time=0.006..0.127 rows=201 loops=1)
               Filter: interval_contains_now(asserted)
 Planning Time: 0.089 ms
 Execution Time: 1835.441 ms
(11 rows)

